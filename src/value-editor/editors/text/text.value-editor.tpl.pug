// INLINE INPUT WITH PREFIX/SUFFIX
.input-group(ng-if="$ctrl.isText() && ($ctrl.options.prefix || $ctrl.options.suffix)")
    .input-group-addon.prefix(ng-if="$ctrl.options.prefix") {{$ctrl.options.prefix}}
    input.form-control(
        ng-if="$ctrl.isText()"

        type="{{$ctrl.options.type}}"

        id="{{$ctrl.valueEditorController.editorId}}"
        name="{{$ctrl.valueEditorController.editorName}}"
        placeholder="{{$ctrl.valueEditorController.placeholder}}"

        ng-model="$ctrl.model"
        ng-model-options="{ getterSetter: true}"
        ng-trim="false"

        ng-ref="$ctrl.preSufFixedNgModelController"
        ng-ref-read="ngModel"

        ng-disabled="$ctrl.valueEditorController.isDisabled"

        ng-required="$ctrl.valueEditorController.validations.required"
        prefixed-minlength="$ctrl.valueEditorController.validations.minlength"
        prefixed-maxlength="$ctrl.valueEditorController.validations.maxlength"
        ng-pattern="$ctrl.valueEditorController.validations.pattern"
        kp-additional-text-validations

        kp-async-validation="$ctrl.valueEditorController.validations.async"

        prefix-suffix-model-adder

        pattern-description-tooltip

        error-messages

        data-main-input

        novalidate
    )
    .input-group-addon.suffix(ng-if="$ctrl.options.suffix") {{$ctrl.options.suffix}}


// INLINE INPUT
input.form-control(
    ng-if="$ctrl.isText() && !($ctrl.options.prefix || $ctrl.options.suffix)"

    type="{{$ctrl.options.type}}"

    id="{{$ctrl.valueEditorController.editorId}}"
    name="{{$ctrl.valueEditorController.editorName}}"
    placeholder="{{$ctrl.valueEditorController.placeholder}}"

    ng-model="$ctrl.model"
    ng-model-options="{ getterSetter: true}"
    ng-trim="false"

    ng-disabled="$ctrl.valueEditorController.isDisabled"

    ng-required="$ctrl.valueEditorController.validations.required"
    ng-minlength="$ctrl.valueEditorController.validations.minlength"
    ng-maxlength="$ctrl.valueEditorController.validations.maxlength"
    ng-pattern="$ctrl.valueEditorController.validations.pattern"
    kp-additional-text-validations

    kp-async-validation="$ctrl.valueEditorController.validations.async"

    pattern-description-tooltip

    error-messages

    data-main-input
)

// TEXTAREA
textarea.form-control(
    ng-if="$ctrl.options.type === 'textarea'"

    id="{{$ctrl.valueEditorController.editorId}}"
    name="{{$ctrl.valueEditorController.editorName}}"
    placeholder="{{$ctrl.valueEditorController.placeholder}}"
    rows="{{$ctrl.getNumberOfRows()}}"

    ng-model="$ctrl.model"
    ng-model-options="{ getterSetter: true}"
    ng-trim="false"

    ng-disabled="$ctrl.valueEditorController.isDisabled"

    ng-required="$ctrl.valueEditorController.validations.required"
    ng-minlength="$ctrl.valueEditorController.validations.minlength"
    ng-maxlength="$ctrl.valueEditorController.validations.maxlength"
    ng-pattern="$ctrl.valueEditorController.validations.pattern"
    kp-additional-text-validations

    kp-async-validation="$ctrl.valueEditorController.validations.async"

    error-messages

    data-main-input
)

// ACE EDITOR
.form-control.ace-editor(
    ng-if="$ctrl.options.type === 'rich-textarea'"

    id="{{$ctrl.valueEditorController.editorId}}"
    name="{{$ctrl.valueEditorController.editorName}}"

    ui-ace="$ctrl.options.aceOptions"

    ng-model="$ctrl.model"
    ng-model-options="{ getterSetter: true}"
    ng-trim="false"

    ng-disabled="$ctrl.valueEditorController.isDisabled"

    ng-required="$ctrl.valueEditorController.validations.required"
    ng-minlength="$ctrl.valueEditorController.validations.minlength"
    ng-maxlength="$ctrl.valueEditorController.validations.maxlength"
    ng-pattern="$ctrl.valueEditorController.validations.pattern"
    kp-additional-text-validations

    kp-async-validation="$ctrl.valueEditorController.validations.async"

    error-messages

    data-main-input
)
